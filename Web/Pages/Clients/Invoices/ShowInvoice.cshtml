@page "/show-invoice/{id:int}"
@model ShowInvoiceModel
@{
}

@section Meta {
    <title>Faktura - @(Model.Invoice.Id) - @(Branding.WebsiteTitle)</title>
}

@section Header {
    <partial name="_Navbar" model="Model.UserToken" />
}

@await Html.PartialAsync("/Pages/Clients/_Shared/_Invoice.cshtml", Model.UserToken)

<main>

    <h4>
        Faktura
        @(Model.Invoice.InvoiceNumber?.ToSwedish() ?? "fakturanummer saknas")
        <span class="muted">
            &thinsp;
            @(Model.Invoice.About)
        </span>
    </h4>

    @if (Model.DraftBalanceRows.Count > 0)
    {
        <div class="notice">
            <p>
                ℹ️ Kreditering är påbörjad.
            </p>
            <ul>
                @foreach (var row in Model.DraftBalanceRows)
                {
                    <li>
                        <a href="/show-invoice-draft/@(row.InvoiceDraftId)">Utkast</a>
                    </li>
                }
            </ul>
        </div>
    }

    <div class="grid">
        <div class="col">
            <div class="notice">
                <h5>@(Model.Invoice.Customer_Name)</h5>
                <ul>
                    @if (Model.Invoice.Customer_Address1.HasValue())
                    {
                        <li>
                            @(Model.Invoice.Customer_Address1)
                        </li>
                    }
                    @if (Model.Invoice.Customer_Address2.HasValue())
                    {
                        <li>
                            @(Model.Invoice.Customer_Address2)
                        </li>
                    }
                    <li>
                        @(Model.Invoice.Customer_ZipCode)
                        @(Model.Invoice.Customer_City)
                    </li>
                    @if (Model.Invoice.Customer_Country.HasValue())
                    {
                        <li>
                            @(Model.Invoice.Customer_Country)
                        </li>
                    }
                </ul>
            </div>
        </div>

        <div class="col">
            <div class="notice">
                <h5>
                    @(Model.Invoice.InvoiceDate.ToIso8601())
                </h5>
                <ul>
                    @if (Model.Invoice.PaymentTerms.HasValue())
                    {
                        <li>
                            @if (!Model.Invoice.IsCredit)
                            {
                                @(Model.Invoice.PaymentTerms)
                            }
                        </li>
                    }
                </ul>
                <ul>
                    @if (Model.Invoice.IsDebit)
                    {
                        <li>
                            Att betala:<br />
                            <b>@(Model.Invoice.LeftToPay.ToSwedish()) kr</b>
                        </li>
                    }
                    @if (Model.Invoice.IsCredit)
                    {
                        <li>
                            Tillgodo:<br />
                            <b>@(Model.Invoice.Balance.ToSwedish()) kr</b>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    @if (Model.BalanceRows.Count > 0)
    {
        <div class="notice">
            @foreach (var row in Model.BalanceRows)
            {
                if (row.DebitInvoiceId == Model.Invoice.Id)
                {
                    <p>
                        Denna faktura krediteras med beloppet
                        <b>@(row.Amount.ToSwedish()) kr</b> av
                        <a href="/show-invoice/@(row.CreditInvoiceId)">faktura @(row.CreditInvoiceNumber)</a>.
                    </p>
                }
                if (row.CreditInvoiceId == Model.Invoice.Id)
                {
                    <p>
                        Denna faktura krediterar 
                        <a href="/show-invoice/@(row.DebitInvoiceId)">faktura @(row.DebitInvoiceNumber)</a>
                        med beloppet
                        <b>@(row.Amount.ToSwedish()) kr</b>
                    </p>
                }
            }
        </div>
    }

    <div x-data="pageTabs()" x-init="init()" class="tabs">

        <div class="tablist" role="tablist">
            <button :class="{ 'active': isActive('rows') }" @@click="setActive('rows')">Rader</button>
            <button :class="{ 'active': isActive('accounting') }" @@click="setActive('accounting')">Kontering</button>
            @if (Model.UserToken.IsAdmin)
            {
                <button :class="{ 'active': isActive('admin') }" @@click="setActive('admin')">Admin</button>
            }
        </div>

        <div>
            <div x-show="isActive('rows')" x-cloak>

                @* <h5>Rader</h5> *@

                <figure style="width:100%">
                    <table style="width:inherit">
                        <tr>
                            <th>Art.nr</th>
                            <th>Artikel</th>
                            <th class="end-align">Kvantitet</th>
                            <th class="end-align">Pris</th>
                            <th class="end-align">Moms-sats</th>
                            @* <th>Netto</th>
                            <th>Moms</th> *@
                            <th class="end-align">Totalt</th>
                        </tr>
                        @foreach (var row in Model.InvoiceRows)
                        {
                            <tr>
                                <td>
                                    @(row.ArticleNumber)
                                </td>
                                <td>
                                    @(row.ArticleName)
                                </td>
                                <td class="end-align">
                                    @(row.Quantity.ToOptionalDecimals())
                                    @(row.Unit)
                                </td>
                                <td class="end-align">
                                    @(row.UnitPrice.ToSwedish())
                                    @(Swedish.Currency.Short)
                                </td>
                                <td class="end-align">
                                    @(row.VatRate.ToOptionalDecimals()) %
                                </td>
                                @* <td>
                                    @(row.NetAmount)
                                </td>
                                <td>
                                    @(row.VatAmount)
                                </td> *@
                                <td class="end-align">
                                    @(row.TotalAmount)
                                </td>
                            </tr>
                        }
                    </table>
                </figure>

                @* <h5>Summering</h5> *@

                <figure>
                    <table>
                        <tr>
                            <th class="end-align">Netto</th>
                            <th class="end-align">Moms</th>
                            <th class="end-align">Avrundning</th>
                            <th class="end-align">Totalt</th>
                        </tr>
                        <tr>
                            <td class="end-align">
                                @(Model.Invoice.NetAmount.ToSwedish())
                            </td>
                            <td class="end-align">
                                @(Model.Invoice.VatAmount.ToSwedish())
                            </td>
                            <td class="end-align">
                                @(Model.Invoice.TotalRounding.ToSwedish())
                            </td>
                            <td class="end-align">
                                @(Model.Invoice.Total.ToSwedish())
                            </td>
                        </tr>
                    </table>
                </figure>

            </div>

            <div x-show="isActive('accounting')" x-cloak>

                <h5>Kontering</h5>

                <figure>
                    <table>
                        <tr>
                            <th>Konto</th>
                            <th class="end-align">Debet</th>
                            <th class="end-align">Kredit</th>
                        </tr>
                        @foreach (var row in Model.InvoiceAccountingRows)
                        {
                            <tr>
                                <td>
                                    @(row.Account ?? "Okänt")
                                </td>
                                <td class="end-align">
                                    @(row.Debit.ToSwedish())
                                </td>
                                <td class="end-align">
                                    @(row.Credit.ToSwedish())
                                </td>
                            </tr>
                        }
                    </table>
                </figure>

            </div>

            @if (Model.UserToken.IsAdmin)
            {
                <div x-show="isActive('admin')" x-cloak>

                    <h5>Summering</h5>

                    <figure>
                        <table>
                            <tr>
                                <th class="end-align">Totalt</th>
                                <th class="end-align">Balans</th>
                                <th class="end-align">Kvar att betala</th>
                            </tr>
                            <tr>
                                <td class="end-align">
                                    @(Model.Invoice.Total.ToSwedish())
                                </td>
                                <td class="end-align">
                                    @(Model.Invoice.Balance.ToSwedish())
                                </td>
                                <td class="end-align">
                                    @(Model.Invoice.LeftToPay.ToSwedish())
                                </td>
                            </tr>
                        </table>
                    </figure>

                    <h5>Kontering</h5>

                    <figure>
                        <table>
                            <tr>
                                <th>Konto</th>
                                <th class="end-align">Debet</th>
                                <th class="end-align">Kredit</th>
                            </tr>
                            @foreach (var row in Model.InvoiceAccountingRows)
                            {
                                <tr>
                                    <td>
                                        @(row.Account ?? "Okänt")
                                    </td>
                                    <td class="end-align">
                                        @(row.Debit.ToSwedish())
                                    </td>
                                    <td class="end-align">
                                        @(row.Credit.ToSwedish())
                                    </td>
                                </tr>
                            }
                        </table>
                    </figure>

                    <p>
                        <a class="button admin" href="/execute-invoice-routine/@(Model.Invoice.Id)">
                            Kör fakturarutin
                        </a>
                    </p>

                </div>
            }
        </div>
    </div>

    <p>
        @if (Model.Invoice.IsCredit == false)
        {
            <a class="button" href="/credit-invoice-draft/@(Model.Invoice.Id)">
                Kreditera
            </a>
        }
    </p>

</main>

<script>
    function pageTabs() {
        return {
            active: 'rows',

            init() {
                const hash = window.location.hash.replace('#', '');
                if (hash) this.active = hash;

                this.$watch('active', value => {
                    history.replaceState(null, '', `#${value}`);
                });
            },

            setActive(tab) {
                this.active = tab;
            },

            isActive(tab) {
                return this.active === tab;
            }
        }
    }
</script>
